name: Publish Release in Plugin Lifecycle Management
description: Publish a release in the Plugin Lifecycle Management

inputs:
  chart_name:
    description: Chart name
    required: true
  application_ids:
    description: Application IDs
    required: true
  lifecycle_api_token:
    description: Lifecycle API Token
    required: true
  working_directory:
    description: Working directory
    required: true

permissions:
  id-token: write
  contents: read
  packages: write

runs:
  using: composite
  steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Get Application ID 
      id: map_app_id
      run: |
        APP_IDS="${{ inputs.application_ids }}"
        CHART_NAME="${{ inputs.chart_name }}"

        # Search for the ID corresponding to the chart name
        APP_ID=$(echo "$APP_IDS" | tr ',' '\n' | sed 's/^[[:space:]]*//' | grep "^${CHART_NAME}:" | cut -d':' -f2)

        if [ -z "$APP_ID" ]; then
          echo "❌ Application ID not found for chart: $CHART_NAME"
          exit 1
        fi

        echo "✅ Found Application ID: $APP_ID"
        echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
      shell: bash

    - name: Get Release Version
      id: get_release_version
      run: |
        CHART_NAME="${{ inputs.chart_name }}"

        TAG=$(git tag --list "${CHART_NAME}-v*" | grep -E "${CHART_NAME}-v[0-9]+\.[0-9]+\.[0-9]+$" | sort -Vr | head -n 1)

        echo "Found tag: $TAG"

        if [ -z "$TAG" ]; then
          echo "No tag found for chart $CHART_NAME"
          echo "version=" >> $GITHUB_OUTPUT
          exit 0
        fi

        VERSION="${TAG#${CHART_NAME}-v}"

        echo "Extracted version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - uses: glasskube/distr-create-version-action@v1
      id: create_version
      with:
        api-base: 'https://lifecycle.lerian.studio/api/v1'
        api-token: ${{ inputs.lifecycle_api_token }}
        application-id: ${{ steps.map_app_id.outputs.app_id }}
        version-name: ${{ steps.get_release_version.outputs.version }}
        chart-type: 'oci'
        chart-name: ${{ inputs.chart_name }}
        chart-version: ${{ steps.get_release_version.outputs.version }}
        chart-url: 'oci://registry-1.docker.io/lerianstudio/${{ inputs.chart_name }}'
        template-file: '${{ inputs.working_directory }}/values-template.yaml'
